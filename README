- versions-maven-plugin:

	+ mvn versions:display-dependency-updates	scans a project's dependencies and produces a report of those dependencies which have newer versions available.
	+ mvn versions:display-plugin-updates		scans a project's plugins and produces a report of those plugins which have newer versions available.
	+ mvn versions:display-property-updates		scans a project and produces a report of those properties which are used to control artifact versions and which properies have newer versions available.
	
- in order to display a notifier pop-up: jQuery.gritter.add({ title : 'infrared', text : 'has played mountain!', image : 'image/logoh2.gif', sticky : false, time : ''});

- never use: blahDao.save(blah) but blahDao.getSession().save(blah) otherwise you'll get strange bugs due to data duplication. Think about it in the PersistenceService!!!

- For the error messages "Deadlock found when trying to get lock; try restarting transaction" or equivalent:

    + there's a parameter to provide to MySQL / MariaDB: http://dba.stackexchange.com/questions/58459/mysql-error-impossible-to-write-to-binary-log      http://www.yellowfinbi.com/YFForum-Time-out-Error-BINLOG-FORMAT-in-log-file-?thread=105422
    => You will need to edit the MySql my.cnf file and add a line at the bottom : binlog_format=ROW

    + and an annotation to provide to the problematic method of the PersistenceService: @Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation=Isolation.SERIALIZABLE) (http://stackoverflow.com/questions/7947582/spring-transactional-deadlock)

- In case of cascading object graph not working:

    + annotate the PersistenceService method with  @Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED)
    + retrieve the object from its parent, remove the objet from its parent (nullify it if needed) and do saveOrUpdate(merge(blah)) on the retrieved object

- For functional tests, launch the Selenium server before trying to run them:

    + mvn selenium:start-server

- In unit tests, a recurring challenge is to find the paths of the components to check. To simplify it, just use this in your Application class:

    + this.getMarkupSettings().setStripWicketTags(false);
    + this.getDebugSettings().setOutputComponentPath(true);

Just replace the "_" by ":" in your WicketTester paths.

- To avoid loading Spring application context for each test class, annotate each new test classes with:

    + @ContextConfiguration(locations = { "classpath:applicationContext.xml", "classpath:applicationContextTest.xml" })

- To configure Jacoco:

    + http://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/
    + http://www.ffbit.com/blog/2014/05/21/skipping-jacoco-execution-due-to-missing-execution-data-file/

- Cobertura for Java 8:

    + http://www.befreeman.com/2014/09/getting-cobertura-code-coverage-with.html